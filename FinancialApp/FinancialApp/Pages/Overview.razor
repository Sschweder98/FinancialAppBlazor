@page "/overview"

<PageTitle>Übersicht</PageTitle>

@using ChartJs.Blazor.Common;
@using ChartJs.Blazor.PieChart;
@using ChartJs.Blazor.BarChart;
@using ChartJs.Blazor.Util;
@using FinancialApp.Data
@using FinancialApp.Models
@using System.Drawing;
@inject BankingTransactionService TransactionsService

<h3>Übersicht</h3>

<h1>Finance-Front</h1>
<br>
<h2>Von @StartDate bis @EndDate</h2>

<h3>überblick</h3>
<div class="chartbox">
    <Chart Config="mainchart"></Chart>
</div>
<br>
@*<h3>einnahmen</h3>
<div class="chartbox">
    <Chart Config="_chart1"></Chart>
    <table id="tableeinnahmen">
        <tr>
            <th>kategorie</th>
            <th>summe</th>
        </tr>
    </table>
</div>
<br>
<h3>ausgaben</h3>
<h4>alle</h4>
<div class="chartbox">
    <Chart Config="_chart2"></Chart>
    <table id="tableausgabenalle">
        <tr>
            <th>kategorie</th>
            <th>summe</th>
        </tr>
    </table>
</div>
<h4>fix</h4>
<div class="chartbox">
    <Chart Config="_chart3"></Chart>
    <table id="tableausgabenfix">
        <tr>
            <th>kategorie</th>
            <th>summe</th>
        </tr>
    </table>
</div>
<h4>nicht fix</h4>
<div class="chartbox">
    <Chart Config="_chart4"></Chart>
    <table id="tableausgabennichtfix">
        <tr>
            <th>kategorie</th>
            <th>summe</th>
        </tr>
    </table>
</div>*@

@code {
    DateTime StartDate = Convert.ToDateTime("01.11.2022");
    DateTime EndDate = Convert.ToDateTime("30.11.2022");

    private BarConfig mainchart;
    private PieConfig _chart1;
    private PieConfig _chart2;
    private PieConfig _chart3;
    private PieConfig _chart4;

    private BankingTransaction[]? Transactions;

    IEnumerable<DateTime> overview_x;
    List<int> overview_y;

    protected override void OnInitialized()
    {
        Transactions = TransactionsService.GetTransactionsAsync();
        overview_y = new List<int>();
        generateCharts();
    }

    public void generateCharts()
    {
        overview_x = (from t in Transactions where t.category != "Umbuchung" && t.date > StartDate && t.date < EndDate orderby t.date ascending select t.date).Distinct();
        overview_y.Clear();

        foreach (var day in overview_x)
        {
            overview_y.Add(Convert.ToInt32((from t in Transactions where t.date == day select t.value).Sum()));
        }

        mainchart = new BarConfig
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Umsatz"
                    }
                }
            };

        BarDataset<int> dataset = new BarDataset<int>(overview_y, false)
            {
                Label = "Insegesamt",
                BackgroundColor = ColorUtil.FromDrawingColor(Color.Blue),
                BorderColor = ColorUtil.FromDrawingColor(Color.DarkBlue),
                BorderWidth = 1
            };

        foreach (DateTime day in overview_x)
        {
            mainchart.Data.Labels.Add(day.ToString("dd.MM"));
        }

        mainchart.Data.Datasets.Add(dataset);
    }

}
