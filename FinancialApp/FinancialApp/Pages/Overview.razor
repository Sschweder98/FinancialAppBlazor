@page "/overview"

<PageTitle>Übersicht</PageTitle>

@using ChartJs.Blazor.Common;
@using ChartJs.Blazor.PieChart;
@using ChartJs.Blazor.BarChart;
@using ChartJs.Blazor.Util;
@using FinancialApp.Data
@using FinancialApp.Models
@inject BankingTransactionService TransactionsService

<h3>Übersicht</h3>

<h1>Finance-Front</h1>
<br>
<h2>Von @StartDate bis @EndDate</h2>

<h3>überblick</h3>
<div class="chartbox">
    <Chart Config="mainchart"></Chart>
</div>
<br>
@*<h3>einnahmen</h3>
<div class="chartbox">
    <Chart Config="_chart1"></Chart>
    <table id="tableeinnahmen">
        <tr>
            <th>kategorie</th>
            <th>summe</th>
        </tr>
    </table>
</div>
<br>
<h3>ausgaben</h3>
<h4>alle</h4>
<div class="chartbox">
    <Chart Config="_chart2"></Chart>
    <table id="tableausgabenalle">
        <tr>
            <th>kategorie</th>
            <th>summe</th>
        </tr>
    </table>
</div>
<h4>fix</h4>
<div class="chartbox">
    <Chart Config="_chart3"></Chart>
    <table id="tableausgabenfix">
        <tr>
            <th>kategorie</th>
            <th>summe</th>
        </tr>
    </table>
</div>
<h4>nicht fix</h4>
<div class="chartbox">
    <Chart Config="_chart4"></Chart>
    <table id="tableausgabennichtfix">
        <tr>
            <th>kategorie</th>
            <th>summe</th>
        </tr>
    </table>
</div>*@

@code {
    string StartDate = "01.11.2022";
    string EndDate = "30.11.2022";

    private BarConfig mainchart;
    private PieConfig _chart1;
    private PieConfig _chart2;
    private PieConfig _chart3;
    private PieConfig _chart4;

    private BankingTransaction[]? Transactions;

    protected override void OnInitialized()
    {


        //$sql = "SELECT LEFT(T1.date, 10) AS fixedDate, (SELECT ROUND(SUM(VALUE), 2) WHERE date = T1.date) AS summ FROM _finance_data T1 
        //WHERE T1.category NOT LIKE 'Umbuchung' 
        //AND T1.DATE >= '" . $from . "' 
        //AND T1.DATE <= '" . $to . "' 
        //GROUP BY (T1.date)
        //ORDER BY T1.date ASC

        Transactions = TransactionsService.GetTransactionsAsync();
        var overview_x = (from t in Transactions where t.category != "Umbuchung" select t.date).Distinct();
        var overview_y= new List<Double>();

        foreach (var day in overview_x)
        {
            overview_y.Add((from t in Transactions where t.date == day select t.value).Sum());
        }

        //mainchart
        mainchart = new BarConfig
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Insgesamt"
                    }
                }
            };

        foreach (string color in new[] { "Red", "Yellow", "Green", "Blue" })
        {
            mainchart.Data.Labels.Add(color);
        }

        BarDataset<int> dataset = new BarDataset<int>(overview_x, true);
        BarDataset<int> dataset2 = new BarDataset<int>(overview_y, false);

        mainchart.Data.Datasets.Add(dataset);
    }
}
